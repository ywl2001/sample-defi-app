{"version":3,"sources":["App.js","contracts/contractConfig.js","reportWebVitals.js","index.js"],"names":["App","contract","setContract","useState","account","setAccount","unlockTime","setUnlockTime","isOwner","setIsOwner","useEffect","async","window","ethereum","provider","ethers","providers","Web3Provider","send","signer","getSigner","accountAddress","getAddress","contractInstance","Contract","LockABI","unlock","ownerAddress","owner","toNumber","toLowerCase","console","log","alert","init","React","createElement","style","padding","role","aria-label","Date","toLocaleString","onClick","tx","withdraw","wait","err","message","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"q/BAqEeA,MAhEf,WACE,MAAOC,EAAUC,GAAeC,mBAAS,OAClCC,EAASC,GAAcF,mBAAS,OAChCG,EAAYC,GAAiBJ,mBAAS,OACtCK,EAASC,GAAcN,oBAAS,GAyCvC,OAvCAO,oBAAU,KACKC,WACX,GAAIC,OAAOC,SAAU,CACnB,MAAMC,EAAW,IAAIC,IAAOC,UAAUC,aAAaL,OAAOC,gBACpDC,EAASI,KAAK,sBAAuB,IAC3C,MAAMC,EAASL,EAASM,YAClBC,QAAuBF,EAAOG,aAE9BC,EAAmB,IAAIR,IAAOS,SCnBZ,6CDmBuCC,EAASN,GAClEO,QAAeH,EAAiBjB,aAChCqB,QAAqBJ,EAAiBK,QAE5C1B,EAAYqB,GACZlB,EAAWgB,GACXd,EAAcmB,EAAOG,YACrBpB,EAAWkB,EAAaG,gBAAkBT,EAAeS,eAEzDC,QAAQC,IAAI,4BAAwBX,GACpCU,QAAQC,IAAI,oCC7BY,8CD8BxBD,QAAQC,IAAI,yBAAqBL,QAEjCM,MAAM,6BAIVC,IAEC,IAaDC,IAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACrBH,IAAAC,cAAA,UAAID,IAAAC,cAAA,QAAMG,KAAK,MAAMC,aAAW,QAAO,gBAAS,kBAChDL,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,qBAA0B,IAAEhC,GACtCE,GACC6B,IAAAC,cAAA,SACED,IAAAC,cAAA,cAAQ,gBAAsB,IAC7B,IAAIK,KAAkB,IAAbnC,GAAmBoC,kBAGhClC,EACC2B,IAAAC,cAAA,UAAQO,QArBShC,UACrB,IACE,MAAMiC,QAAW3C,EAAS4C,iBACpBD,EAAGE,OACTb,MAAM,wBACN,MAAOc,GACPd,MAAM,oBAAsBc,EAAIC,YAeG,YAEjCb,IAAAC,cAAA,SAAG,gDEnDIa,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5B,IAAAC,cAACD,IAAM6B,WAAU,KACf7B,IAAAC,cAACpC,EAAG,QAORiD,M","file":"static/js/main.857dd486.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport LockABI from \"./contracts/LockABI.json\";\nimport { CONTRACT_ADDRESS } from \"./contracts/contractConfig\";\n\nfunction App() {\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [unlockTime, setUnlockTime] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n\n  useEffect(() => {\n    const init = async () => {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const accountAddress = await signer.getAddress();\n\n        const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, LockABI, signer);\n        const unlock = await contractInstance.unlockTime();\n        const ownerAddress = await contractInstance.owner();\n\n        setContract(contractInstance);\n        setAccount(accountAddress);\n        setUnlockTime(unlock.toNumber());\n        setIsOwner(ownerAddress.toLowerCase() === accountAddress.toLowerCase());\n\n        console.log(\"✅ Connected account:\", accountAddress);\n        console.log(\"✅ Deployed contract address:\", CONTRACT_ADDRESS);\n        console.log(\"✅ Contract owner:\", ownerAddress);\n      } else {\n        alert(\"Please install MetaMask!\");\n      }\n    };\n\n    init();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleWithdraw = async () => {\n    try {\n      const tx = await contract.withdraw();\n      await tx.wait();\n      alert(\"Withdraw successful!\");\n    } catch (err) {\n      alert(\"Withdraw failed: \" + err.message);\n    }\n  };\n\n  return (\n    <div style={{ padding: \"2rem\" }}>\n      <h2><span role=\"img\" aria-label=\"lock\">🔐</span> Lock Contract</h2>\n      <p><strong>Connected Wallet:</strong> {account}</p>\n      {unlockTime && (\n        <p>\n          <strong>Unlock Time:</strong>{\" \"}\n          {new Date(unlockTime * 1000).toLocaleString()}\n        </p>\n      )}\n      {isOwner ? (\n        <button onClick={handleWithdraw}>Withdraw</button>\n      ) : (\n        <p>You're not the owner, withdraw not allowed</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// This code is a simple React application that connects to an Ethereum smart contract using ethers.js.\n// It allows the connected wallet to view the unlock time of the contract and withdraw funds if the wallet is the owner of the contract.\n/*目前完成了這些：\n建好 React 前端專案 ✅\n跟智能合約建立連線 ✅\n顯示連線錢包、合約地址、解鎖時間 ✅\n檢查是否是合約擁有者 ✅\n實作 withdraw() 功能 ✅\n網頁可以正常跑起來 ✅\n*/","export const CONTRACT_ADDRESS = \"0x83d46Db62AD3670E76B6a4690f61A738e288775A\"; // <-- 用你的 Lock 合約地址\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}